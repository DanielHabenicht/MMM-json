{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":false},"docs":[{"location":"","text":"<p>This is a Module for MagicMirror.  It is designed to display parts or the whole JSON response from an api.</p>","title":"Welcome"},{"location":"#preview","text":"<p></p> <p></p>","title":"Preview"},{"location":"#guide","text":"<ol> <li>Install by cloning this repository into <code>MagicMirror/modules</code> directory and installing the dependencies.</li> </ol> <pre><code>cd ./modules\ngit clone https://github.com/DanielHabenicht/MMM-json.git\nnpm install\n</code></pre> <ol> <li>Create an entry in <code>config/config.js</code> with your url and any config options.</li> </ol> config/config.js<pre><code>{\n  module: 'MMM-json',\n  position: 'bottom_left',\n  config: { // (1)\n    url: \"https://jsonplaceholder.typicode.com/users/1\", // Path to your json api\n  }\n},\n</code></pre> <ol> <li>Have a look at the configuration section for more configuration options.</li> </ol>  <p>Attribution</p> <p>Attribution of some basic work and inspiration goes to qistoph.</p>","title":"Guide"},{"location":"configuration/","text":"<p>Scroll through the examples first. Maybe you can just copy and paste!</p>","title":"Configuration"},{"location":"configuration/#overall","text":"Property Description     <code>url</code> The url where to get the json response from.         Type: <code>string</code> Default: <code>https://jsonplaceholder.typicode.com/users</code>    <code>refreshInterval</code> The interval with which the url is queried and your values are updated.         Type: <code>int</code> (seconds)         Default: <code>300000</code> =&gt; 5 minutes          <code>headerIcon</code> The Icon for your Header         Type: <code>string</code> any FontAwesome Icon Default: <code></code> (none)          <code>fetchOptions</code> Custom parameters for the <code>fetch</code> call. For example <code>method</code>, <code>headers</code>, <code>body</code>.         Type: <code>object</code> Default: <code>{}</code> No additional parameters.          <code>jq</code> Custom jq.node command to apply to the data. Used to convert JSON data.         Type: <code>string</code> Default: <code>'.'</code> Use value as received.          <code>values</code> Custom Configuration of the values you want to display (see below)         Type: <code>array</code> Default: <code>[]</code> Which means it displays all first level attributes (or the first element of an array).          <code>styleRules</code> Custom Style Rules matching for applying styles to any value (see below)         Type: <code>array</code> Default: <code>[]</code> No style rules are applied.","title":"Overall"},{"location":"configuration/#value-configuration","text":"Value-Property Description     <code>title</code> The Title of the Property displayed on the screen         Type: <code>string</code> Default: The attribute name          <code>query</code> The jsonpath to the value of your json response you want to display. Here you can test your expression Type: <code>string</code> Example: <code>$[?(@.name=='Ervin Howell')].address.geo.lat</code>    <code>suffix</code> String that will be displayed behind your query value         Type: <code>string</code> Example: <code>%</code>    <code>prefix</code> String that will be displayed in front of your query value         Type: <code>string</code> Example: <code>EUR</code>","title":"Value Configuration"},{"location":"configuration/#stylerules-configuration","text":"Value-Property Description     <code>match</code> The matching rule determining if the style         Type: <code>function</code> (with the value as parameter and returning a boolean)         Example: <code>(value) =&gt; value &gt; 10</code>    <code>style</code> The style that should be applied to the value element.         Type: <code>string</code> Example: <code>color: ref</code> Default: <code></code> (none)          <code>class</code> A string that will be appended to the class attribute of the value element.         Type: <code>string</code> Example: <code>class-name</code> Default: <code></code> (none)","title":"styleRules Configuration"},{"location":"configuration/#json-flow","text":"<pre><code>graph TD\n  API --&gt;|Retrieve with fetchOptions| plainJSON[Original JSON];\n  plainJSON --&gt;|Run jq| form1JSON[Transformed JSON];\n  form1JSON --&gt;|Run values queries| form2JSON[Transformed JSON];\n  form2JSON --&gt;|Run styleRules| m[Display in Magic Mirror];</code></pre>","title":"JSON Flow"},{"location":"development/","text":"","title":"Development"},{"location":"development/#testing","text":"<pre><code>echo '{\n   \"test\": {\n     \"id\": 1,\n     \"title\": \"json-server\",\n     \"author\": \"typicode\",\n     \"test\": [\"test1\", \"test2\"]\n   }\n }\n' &gt; db.json\nnpm install -g json-server\njson-server --watch db.json\n</code></pre>","title":"Testing"},{"location":"examples/","text":"","title":"Examples"},{"location":"examples/#basic","text":"<pre><code>{\n  module: 'MMM-json',\n  position: 'bottom_left',\n  config: {\n    url: \"https://jsonplaceholder.typicode.com/users/1\", // Path to your json api\n    styleRules: [ // Provide custom style rules for any value\n      {\n        match: (value) =&gt; value == 1,\n        style: \"color: red;\",\n        class: \"large\"\n      }\n    ]  \n  }\n},\n</code></pre>","title":"Basic:"},{"location":"examples/#fetch-options","text":"<pre><code>{\n  module: \"MMM-json\",\n  position: \"bottom_left\",\n  header: \"JSON example POST\",\n  config: {\n    url: \"https://jsonplaceholder.typicode.com/posts\",\n    fetchOptions: {\n      method: \"POST\",\n      body: {\n        \"search\": \"something\"\n      }\n    }\n  }\n},\n</code></pre>","title":"Fetch-Options"},{"location":"examples/#jq","text":"<p>You can preprocess the json response with jq-node:</p> <pre><code>{\n  module: \"MMM-json\",\n  position: \"bottom_left\",\n  header: \"JSON example jq\",\n  config: {\n    url: \"https://jsonplaceholder.typicode.com/users\",\n    headerIcon: \"fa-cube\",\n    jq: 'keyBy(\"name\") | mapValues(a =&gt; [a.address.street,a.address.suite,a.address.city].join(\", \"))'\n  }\n},\n</code></pre>","title":"JQ"},{"location":"examples/#jsonpath","text":"<p>With JSONPath you can select the values you want to display:</p> <pre><code>{\n  module: \"MMM-json\",\n  position: \"bottom_left\",\n  header: \"JSON\",\n  config: {\n    url: \"https://jsonplaceholder.typicode.com/users\",\n    headerIcon: \"fa-cube\",\n    values: [\n      {\n        title: \"Name\",\n        query: \"$[1].name\"\n      },\n      {\n        title: \"Coordinate 1\",\n        query: \"$[?(@.id==2)].address.geo.lat\",\n        prefix: \"LAT\",\n        suffix: \"\u00b0\"\n      },\n      {\n        title: \"Coordinate 2\",\n        query: \"$[?(@.name=='Ervin Howell')].address.geo.lat\",\n        prefix: \"LON\",\n        suffix: \"\u00b0\"\n      }\n    ]\n  }\n},\n</code></pre>","title":"JSONPath"},{"location":"examples/#multi-value-example","text":"<pre><code>{\n  module: \"MMM-json\",\n  position: \"bottom_left\",\n  header: \"JSON example POST\",\n  config: {\n    url: \"https://jsonplaceholder.typicode.com/users/1\",\n    values: [\n      {\n        title: \"Address\",\n        query: [\"$.address.zipcode\", \"$.address.city\", \"$.address.street\"],\n        suffix: [\"\", \",\"]\n      },\n      {\n        title: \"Geo\",\n        query: [\"$.address.geo.lat\", \"$.address.geo.lng\"],\n        suffix: [\"LAT\", \"LNG\"]\n      }\n    ],\n  }\n},\n</code></pre>","title":"Multi Value Example"}]}